/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ContractTransaction,
  EventFilter,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  ethers,
} from "ethers";
import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";

interface IncentivePoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createIncentivePool(tuple)": FunctionFragment;
    "deployerToIncentivePool(address)": FunctionFragment;
    "deployers(uint256)": FunctionFragment;
    "getDeployers()": FunctionFragment;
    "getIncentivePoolAddresses()": FunctionFragment;
    "getUserDashboardData(address)": FunctionFragment;
    "incentivePools(uint256)": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "isValidPool(address)": FunctionFragment;
    "masterAdmin()": FunctionFragment;
    "poolCreationFee()": FunctionFragment;
    "updateIncentivePools(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createIncentivePool",
    values: [
      {
        incentiveInfo: {
          incentiveToken: string;
          incentiveAmountPerTransaction: BigNumberish;
          affiliateAmountPerTransaction: BigNumberish;
          userAmountPerTransaction: BigNumberish;
          leftTransactionNum: BigNumberish;
          maxTransactionNumPerWallet: BigNumberish;
          endTimeStamp: BigNumberish;
        };
      },
    ],
  ): string;
  encodeFunctionData(functionFragment: "deployerToIncentivePool", values: [string]): string;
  encodeFunctionData(functionFragment: "deployers", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getDeployers", values?: undefined): string;
  encodeFunctionData(functionFragment: "getIncentivePoolAddresses", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUserDashboardData", values: [string]): string;
  encodeFunctionData(functionFragment: "incentivePools", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "isValidPool", values: [string]): string;
  encodeFunctionData(functionFragment: "masterAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolCreationFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateIncentivePools",
    values: [
      {
        info: {
          incentivePoolAddress: string;
          referrals: { affiliate: string; user: string }[];
        }[];
      },
    ],
  ): string;

  decodeFunctionResult(functionFragment: "createIncentivePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployerToIncentivePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeployers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIncentivePoolAddresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUserDashboardData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incentivePools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValidPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolCreationFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateIncentivePools", data: BytesLike): Result;

  events: {
    "CreateIncentivePool(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateIncentivePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export class IncentivePoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IncentivePoolFactoryInterface;

  functions: {
    createIncentivePool(
      req: {
        incentiveInfo: {
          incentiveToken: string;
          incentiveAmountPerTransaction: BigNumberish;
          affiliateAmountPerTransaction: BigNumberish;
          userAmountPerTransaction: BigNumberish;
          leftTransactionNum: BigNumberish;
          maxTransactionNumPerWallet: BigNumberish;
          endTimeStamp: BigNumberish;
        };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deployerToIncentivePool(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    deployers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getDeployers(overrides?: CallOverrides): Promise<[string[]]>;

    getIncentivePoolAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getUserDashboardData(
      walletAddr: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            incentivePoolAddress: string;
            affiliateEarned: BigNumber;
            affiliateClaimed: BigNumber;
            userEarned: BigNumber;
            userClaimed: BigNumber;
          })[],
        ] & {
          totalEarned: BigNumber;
          totalClaimed: BigNumber;
          productNum: BigNumber;
          totalTransactionNum: BigNumber;
          productInfos: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            incentivePoolAddress: string;
            affiliateEarned: BigNumber;
            affiliateClaimed: BigNumber;
            userEarned: BigNumber;
            userClaimed: BigNumber;
          })[];
        },
      ] & {
        res: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            incentivePoolAddress: string;
            affiliateEarned: BigNumber;
            affiliateClaimed: BigNumber;
            userEarned: BigNumber;
            userClaimed: BigNumber;
          })[],
        ] & {
          totalEarned: BigNumber;
          totalClaimed: BigNumber;
          productNum: BigNumber;
          totalTransactionNum: BigNumber;
          productInfos: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            incentivePoolAddress: string;
            affiliateEarned: BigNumber;
            affiliateClaimed: BigNumber;
            userEarned: BigNumber;
            userClaimed: BigNumber;
          })[];
        };
      }
    >;

    incentivePools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    initialize(
      masterAdmin_: string,
      poolCreationFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isValidPool(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    masterAdmin(overrides?: CallOverrides): Promise<[string]>;

    poolCreationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateIncentivePools(
      req: {
        info: {
          incentivePoolAddress: string;
          referrals: { affiliate: string; user: string }[];
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  createIncentivePool(
    req: {
      incentiveInfo: {
        incentiveToken: string;
        incentiveAmountPerTransaction: BigNumberish;
        affiliateAmountPerTransaction: BigNumberish;
        userAmountPerTransaction: BigNumberish;
        leftTransactionNum: BigNumberish;
        maxTransactionNumPerWallet: BigNumberish;
        endTimeStamp: BigNumberish;
      };
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deployerToIncentivePool(arg0: string, overrides?: CallOverrides): Promise<string>;

  deployers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getDeployers(overrides?: CallOverrides): Promise<string[]>;

  getIncentivePoolAddresses(overrides?: CallOverrides): Promise<string[]>;

  getUserDashboardData(
    walletAddr: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        incentivePoolAddress: string;
        affiliateEarned: BigNumber;
        affiliateClaimed: BigNumber;
        userEarned: BigNumber;
        userClaimed: BigNumber;
      })[],
    ] & {
      totalEarned: BigNumber;
      totalClaimed: BigNumber;
      productNum: BigNumber;
      totalTransactionNum: BigNumber;
      productInfos: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        incentivePoolAddress: string;
        affiliateEarned: BigNumber;
        affiliateClaimed: BigNumber;
        userEarned: BigNumber;
        userClaimed: BigNumber;
      })[];
    }
  >;

  incentivePools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  initialize(
    masterAdmin_: string,
    poolCreationFee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isValidPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  masterAdmin(overrides?: CallOverrides): Promise<string>;

  poolCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

  updateIncentivePools(
    req: {
      info: {
        incentivePoolAddress: string;
        referrals: { affiliate: string; user: string }[];
      }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    createIncentivePool(
      req: {
        incentiveInfo: {
          incentiveToken: string;
          incentiveAmountPerTransaction: BigNumberish;
          affiliateAmountPerTransaction: BigNumberish;
          userAmountPerTransaction: BigNumberish;
          leftTransactionNum: BigNumberish;
          maxTransactionNumPerWallet: BigNumberish;
          endTimeStamp: BigNumberish;
        };
      },
      overrides?: CallOverrides,
    ): Promise<void>;

    deployerToIncentivePool(arg0: string, overrides?: CallOverrides): Promise<string>;

    deployers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getDeployers(overrides?: CallOverrides): Promise<string[]>;

    getIncentivePoolAddresses(overrides?: CallOverrides): Promise<string[]>;

    getUserDashboardData(
      walletAddr: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          incentivePoolAddress: string;
          affiliateEarned: BigNumber;
          affiliateClaimed: BigNumber;
          userEarned: BigNumber;
          userClaimed: BigNumber;
        })[],
      ] & {
        totalEarned: BigNumber;
        totalClaimed: BigNumber;
        productNum: BigNumber;
        totalTransactionNum: BigNumber;
        productInfos: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          incentivePoolAddress: string;
          affiliateEarned: BigNumber;
          affiliateClaimed: BigNumber;
          userEarned: BigNumber;
          userClaimed: BigNumber;
        })[];
      }
    >;

    incentivePools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    initialize(masterAdmin_: string, poolCreationFee_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    isValidPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    masterAdmin(overrides?: CallOverrides): Promise<string>;

    poolCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    updateIncentivePools(
      req: {
        info: {
          incentivePoolAddress: string;
          referrals: { affiliate: string; user: string }[];
        }[];
      },
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    CreateIncentivePool(
      caller?: null,
      poolAddress?: null,
      initialAmount?: null,
    ): TypedEventFilter<[string, string, BigNumber], { caller: string; poolAddress: string; initialAmount: BigNumber }>;

    Initialized(version?: null): TypedEventFilter<[number], { version: number }>;
  };

  estimateGas: {
    createIncentivePool(
      req: {
        incentiveInfo: {
          incentiveToken: string;
          incentiveAmountPerTransaction: BigNumberish;
          affiliateAmountPerTransaction: BigNumberish;
          userAmountPerTransaction: BigNumberish;
          leftTransactionNum: BigNumberish;
          maxTransactionNumPerWallet: BigNumberish;
          endTimeStamp: BigNumberish;
        };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deployerToIncentivePool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDeployers(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentivePoolAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDashboardData(walletAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    incentivePools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      masterAdmin_: string,
      poolCreationFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isValidPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    masterAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    poolCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    updateIncentivePools(
      req: {
        info: {
          incentivePoolAddress: string;
          referrals: { affiliate: string; user: string }[];
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createIncentivePool(
      req: {
        incentiveInfo: {
          incentiveToken: string;
          incentiveAmountPerTransaction: BigNumberish;
          affiliateAmountPerTransaction: BigNumberish;
          userAmountPerTransaction: BigNumberish;
          leftTransactionNum: BigNumberish;
          maxTransactionNumPerWallet: BigNumberish;
          endTimeStamp: BigNumberish;
        };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deployerToIncentivePool(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployers(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeployers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentivePoolAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDashboardData(walletAddr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentivePools(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      masterAdmin_: string,
      poolCreationFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isValidPool(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCreationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateIncentivePools(
      req: {
        info: {
          incentivePoolAddress: string;
          referrals: { affiliate: string; user: string }[];
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
